datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  username      String         @unique
  profile       Profile?
  verifiedAt    DateTime?
  projects      Project[]
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  following User[] @relation(name: "FollowRelation")
  followers User[] @relation(name: "FollowRelation")
}

model Profile {
  id        Int      @id @default(autoincrement())
  avatar    String?
  bio       String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int  @unique
}

model Project {
  id            String         @id @default(cuid())
  title         String?
  editor_input  Json?
  description   String?
  thumbnail     String?
  views         View[]
  comments      Comment[]
  likes         Like[]
  TagOnProjects TagOnProject[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

}

model Tag {
  id           Int            @id @default(autoincrement())
  title        String
  TagOnProject TagOnProject[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model TagOnProject {
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  tag   Tag @relation(fields: [tagId], references: [id])
  tagId Int

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  assignedBy String

  @@id([projectId, tagId])
}

model View {
  id        Int      @id @default(autoincrement())
  ip        String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([ip, projectId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parentId Int?
  parent   Comment? @relation(fields: [parentId], references: [id], name: "comment_parent")

  childrens Comment[] @relation(name: "comment_parent")

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model Notification {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  source    NotificationSource
  message   String
  read      Boolean            @default(false)

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  token     String   @unique
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationSource {
  comment
  like
  follow
  unfollow
}
