### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthResponse {
  code: Int
  data: User
  message: String
  token: String
}

type Comment {
  author: User!
  children: [Comment!]!
  createdAt: DateTime!
  id: Int!
  message: String!
  parentId: Int
  project: Project
  updatedAt: DateTime!
}

input CommentCreateInput {
  message: String
}

type CommentResponse {
  code: Int
  data: Comment
  message: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Edge {
  cursor: String
  node: Project
}

type ExistencePayload {
  exist: Boolean
}

type ExistenceResponse {
  code: Int
  data: ExistencePayload
  message: String
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Like {
  author: User!
  createdAt: DateTime!
  id: Int!
  project: Project!
  updatedAt: DateTime!
}

input LikeCreateInput {
  id: Int!
}

type LikeResponse {
  code: Int
  data: Like
  message: String
}

type Mutation {
  checkEmail(email: String!): ExistenceResponse
  checkUsername(username: String): ExistenceResponse
  createChildComment(message: String, parentId: Int): CommentResponse
  createComment(id: String, message: String): CommentResponse
  createProject(description: String, editor_input: JSONObject, title: String): ProjectResponse
  deleteComment(id: Int): CommentResponse
  deleteProject(id: String): ProjectResponse
  followUser(following_id: Int!): UserResponse
  forgotPassword(email: String!): VerificationTokenResponse
  login(email: String!, password: String!): AuthResponse
  resetPassword(password: String!, token: String!): UserResponse
  signup(email: String!, password: String!, username: String): AuthResponse
  toggleLikeProject(id: String): LikeResponse
  unFollowUser(following_id: Int!): UserResponse
  updateComment(id: Int, message: String): CommentResponse
  updateProfileAvatar(avatar: Upload, id: Int): ProfileAvatarResponse
  updateProfileInfo(bio: String, id: Int, website: String): ProfileInfoResponse
  updateProject(description: String, editor_input: JSONObject, id: String, title: String): ProjectResponse
  updateProjectThumbnail(id: String): ProjectResponse
  updateUser(email: String!, id: Int, password: String!, username: String): UserResponse
  verifiedUser(token: String!): VerificationTokenResponse
}

type Notification {
  author: User!
  createdAt: DateTime!
  id: Int!
  message: String!
  notification: NotificationSource!
  read: Boolean!
  updatedAt: DateTime!
}

enum NotificationSource {
  comment
  follow
  like
  unfollow
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type Profile {
  author: User!
  avatar: String
  bio: String
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  website: String
}

type ProfileAvatar {
  avatar: String
  id: Int!
}

type ProfileAvatarResponse {
  code: Int
  data: ProfileAvatar
  message: String
}

input ProfileCreateInput {
  avatar: String
  bio: String
  id: Int!
  website: String
}

type ProfileInfo {
  bio: String
  id: Int!
  website: String
}

type ProfileInfoResponse {
  code: Int
  data: ProfileInfo
  message: String
}

type Project {
  _count: ProjectCountPayload
  author: User!
  comments: [Comment!]!
  createdAt: DateTime!
  description: String
  editor_input: JSONObject
  id: String!
  likes: [Like!]!
  thumbnail: String
  title: String
  updatedAt: DateTime!
}

type ProjectCountPayload {
  comments: Int
  likes: Int
  views: Int
}

input ProjectCreateInput {
  editor_input: JSONObject
  id: Int!
  title: String!
}

input ProjectOrderByInput {
  createdAt: SortOrder!
}

type ProjectResponse {
  code: Int
  data: Project
  message: String
}

type ProjectsResponse {
  code: Int
  edges: [Edge]
  message: String
  pageInfo: PageInfo
}

type Query {
  me: UserResponse
  myProjects(after: String, first: Int, orderBy: ProjectOrderByInput): ProjectsResponse
  project(id: String): ProjectResponse
  projectPreview(id: String): ProjectResponse
  projects(after: String, first: Int, orderBy: ProjectOrderByInput): ProjectsResponse
  projectsByUsername(after: String, first: Int, orderBy: ProjectOrderByInput, username: String): ProjectsResponse
  user(username: String): UserResponse
  users: UsersResponse
}

enum SortOrder {
  asc
  desc
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  _count: UserCountPayload
  comments: [Comment!]!
  createdAt: DateTime!
  email: String!
  followers: [User!]!
  following: [User!]!
  id: Int!
  likes: [Like!]!
  notifications: [Notification!]!
  profile: Profile
  projects: [Project!]!
  updatedAt: DateTime!
  username: String!
  verifiedAt: DateTime!
}

type UserCountPayload {
  followers: Int
  following: Int
  projects: Int
}

input UserCreateInput {
  comments: [CommentCreateInput!]!
  email: String!
  name: String
  profile: ProfileCreateInput
  projects: [ProjectCreateInput!]!
}

type UserResponse {
  code: Int
  data: User
  message: String
}

type UsersResponse {
  code: Int
  data: [User]
  message: String
}

type VerificationToken {
  createdAt: DateTime!
  email: String!
  expiredAt: DateTime!
  id: Int!
  token: String!
  updatedAt: DateTime!
}

input VerificationTokenCreateInput {
  createdAt: DateTime!
  email: String!
  expiredAt: DateTime!
  id: Int!
  token: String!
  updatedAt: DateTime!
}

type VerificationTokenResponse {
  code: Int
  data: VerificationToken
  message: String
}

type View {
  createdAt: DateTime!
  id: Int!
  ip: String!
  project: Project!
  updatedAt: DateTime!
}
